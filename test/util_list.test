package require tcltest
eval ::tcltest::configure $argv
package require qcode
namespace import qc::*

namespace eval ::qcode::test {

    namespace import ::tcltest::*

    test lshift-1.0 {lshift return value} -setup {
        set test_list [list a b c]
    } -body {
        lshift test_list
    } -cleanup {unset test_list} -result {a}

    test lshift-1.1 {lshift list contents} -setup {
        set test_list [list a b c]
        lshift test_list
    } -body {
       set test_list
    } -cleanup {unset test_list} -result {b c}

    test lshift-1.2 {lshift single item return value} -setup {
        set test_list [list a]
    } -body {
        lshift test_list
    } -cleanup {unset test_list} -result {a}

    test lshift-1.3 {lshift single item list contents} -setup {
        set test_list [list a]
        lshift test_list
    } -body {
       set test_list
    } -cleanup {unset test_list} -result {}

    test lshift-1.4 {lshift empty return value} -setup {
        set test_list [list] 
    } -body {
        lshift test_list
    } -cleanup {unset test_list} -result {}

    test lshift-1.5 {lshift empty list contents} -setup {
        set test_list [list]
        lshift test_list
    } -body {
       set test_list
    } -cleanup {unset test_list} -result {}

    test lunshift-1.0 {lunshift } -setup {
        set test_list [list a b c]
    } -body {
        lunshift test_list z
    } -cleanup {unset test_list} -result {z a b c}

    test lunshift-1.1 {lunshift item into empty} -setup {
        set test_list [list]
    } -body {
        lunshift test_list z
    } -cleanup {unset test_list} -result {z}

    test lunshift-1.2 {lunshift empty into empty} -setup {
        set test_list [list]
    } -body {
        lunshift test_list {}
    } -cleanup {unset test_list} -result {{}}
    
    testConstraint earlier_than_8.5 [expr {$tcl_version<8.5}]
    test lreverse-1.0 {lreverse } -constraints earlier_than_8.5 -setup {
    } -body {
        lreverse [list a b c d]
    } -cleanup {} -result {d c b a}

    test lintersect-1.0 {lintersect } -setup {
    } -body {
        lintersect [list a b c d e] [list d e f g h]
    } -cleanup {} -result {d e}

    test lintersect-1.1 {lintersect empty} -setup {
    } -body {
        lintersect [list a b c d e] [list z y]
    } -cleanup {} -result {}

    test lintersect-1.2 {lintersect same} -setup {
    } -body {
        lintersect [list a b c d e] [list a b c d e]
    } -cleanup {} -result {a b c d e}

    test lintersect-1.3 {lintersect empty and empty} -setup {
    } -body {
        lintersect [list] [list]
    } -cleanup {} -result {}

    test lexclude-1.0 {lexclude } -setup {
    } -body {
        lexclude [list a b c d e] d e f g h
    } -cleanup {} -result {a b c}

    test lexclude-1.1 {lexclude nothing to do} -setup {
    } -body {
        lexclude [list a b c d e] z y x
    } -cleanup {} -result {a b c d e}

    test lexclude-1.2 {lexclude empty result} -setup {
    } -body {
        lexclude [list a b c d e] e d c b a
    } -cleanup {} -result {}

    test lexclude-1.3 {lexclude empty list} -setup {
    } -body {
        lexclude [list] e d c b a
    } -cleanup {} -result {}

    test lexclude-1.4 {lexclude multiple values} -setup {
    } -body {
        lexclude [list 1 2 2 2 3 4 2 3 2 2 2] 2
    } -cleanup {} -result {1 3 4 3}

    test lexclude2-1.0 {lexclude2 } -constraints knownBug -setup {
    } -body {
        lexclude2 [list a b c d e] d e f g h
    } -cleanup {} -result {a b c}

    test lexclude2-1.1 {lexclude2 nothing to do} -constraints knownBug -setup {
    } -body {
        lexclude2 [list a b c d e] z y x
    } -cleanup {} -result {a b c d e}

    test lexclude2-1.2 {lexclude2 empty result} -constraints knownBug -setup {
    } -body {
        lexclude2 [list a b c d e] e d c b a
    } -cleanup {} -result {}

    test lexclude2-1.3 {lexclude2 empty list} -constraints knownBug -setup {
    } -body {
        lexclude2 [list] e d c b a
    } -cleanup {} -result {}

    test lexclude2-1.4 {lexclude2 multiple values} -constraints knownBug -setup {
    } -body {
        lexclude2 [list 1 2 2 2 3 4 2 3 2 2 2] 2
    } -cleanup {} -result {1 3 4 3}

    test lunion-1.0 {lunion } -setup {
    } -body {
        lunion [list a b c d e] [list d e f g h]
    } -cleanup {} -result {a b c d e f g h}

    test lunion-1.1 {lunion repetition} -setup {
    } -body {
        lunion [list a b c d e] [list d e e e f g g h]
    } -cleanup {} -result {a b c d e f g h}

    test lunion-1.2 {lunion empty} -setup {
    } -body {
        lunion [list a b c d e] [list]
    } -cleanup {} -result {a b c d e} 

    test lunion-1.3 {lunion empty and empty} -setup {
    } -body {
        lunion [list] [list]
    } -cleanup {} -result {} 

    test ldelete-1.0 {ldelete } -setup {
        set test_list [list 2007 2008 2009 2012]
    } -body {
        ldelete test_list 1
    } -cleanup {unset test_list} -result {2007 2009 2012}

    test ldelete-1.1 {ldelete invalid index} -setup {
        set test_list [list 2007 2008 2009 2012]
    } -body {
        ldelete test_list 5
    } -returnCodes 1 -cleanup {unset test_list} -result {list doesn't contain element 5}

    test lmove-1.0 {lmove to end} -setup {
    } -body {
        lmove [list 2007 2008 2009 2012] 0 3
    } -cleanup {} -result {2008 2009 2012 2007}

    test lmove-1.1 {lmove invalid index} -setup {
    } -body {
        lmove [list 2007 2008 2009 2012] 0 6
    }  -cleanup {} -result {2008 2009 2012 2007}

    test lmove-1.2 {lmove to middle} -setup {
    } -body {
        lmove [list 2007 2008 2009 2012] 0 2
    } -cleanup {} -result {2008 2009 2007 2012}

    test lmove-1.2 {lmove nothing to do} -setup {
    } -body {
        lmove [list 2007 2008 2009 2012] 0 0
    } -cleanup {} -result {2007 2008 2009 2012}


    cleanupTests
}
namespace delete ::qcode::test
