package require tcltest
eval ::tcltest::configure $argv
# Ensure package is loaded from ./package rather than /usr/lib/tcltk
set auto_path [linsert $auto_path 0 ./package]
package require qcode

namespace eval ::qcode::test {
    namespace import ::tcltest::*
    namespace path ::qc

    # url_path
    test url_path-1.0 {url_path } -setup {
    } -body {
        url_path "/someplace.html?order_number=911&title=casáu"
    } -cleanup {} -result {/someplace.html}

    test url_path-1.1 {url_path full url} -setup {
    } -body {
        url_path "http://www.domain-name99.co.uk/someplace.html?order_number=911&title=casáu"
    } -cleanup {} -result {/someplace.html}

    test url_path-1.2 {url_path full url port number} -setup {
    } -body {		
        url_path "https://www.domain-name99.co.uk:8443/someplace.html?order_number=911&title=casáu"
    } -cleanup {} -result {/someplace.html}

    test url_path-1.3 {url_path root only} -setup {
    } -body {		
        url_path "/"
    } -cleanup {} -result {/}

    test url_path-1.4 {url_path root url} -setup {
    } -body {		
        url_path "https://www.domain.com/"
    } -cleanup {} -result {/}

    # url_encode
    test url_encode-1.0 {url_encode utf-8 safe characters} -body {
        url_encode {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789}
    } -cleanup {} -result {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789}

    test url_encode-1.1 {url_encode utf-8 some unsafe characters} -body {
        url_encode {!\"£$%^&*():? #'@[]{},/|+á
}
    } -cleanup {} -result {%21%5c%22%c2%a3%24%25%5e%26%2a%28%29%3a%3f%20%23%27%40%5b%5d%7b%7d%2c%2f%7c%2b%c3%a1%0a}

    test url_encode-1.2 {url_encode iso8859-1 safe characters} -body {
        url_encode {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789} iso8859-1
    } -cleanup {} -result {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789}

    test url_encode-1.3 {url_encode iso8859-1 some unsafe characters} -body {
        url_encode {!\"£$%^&*():? #'@[]{},/|+á
} iso8859-1
    } -cleanup {} -result {%21%5c%22%a3%24%25%5e%26%2a%28%29%3a%3f%20%23%27%40%5b%5d%7b%7d%2c%2f%7c%2b%e1%0a}

    # url_decode
    test url_decode-1.0 {url_decode utf-8 safe characters} -body {
        url_decode {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789}
    } -cleanup {} -result {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789}

    test url_decode-1.1 {url_decode utf-8 encoded safe characters} -body {
        url_decode {%2e%2d%5f%7e%61%62%63%64%65%66%67%68%69%6a%6b%6c%6d%6e%6f%70%71%72%73%74%75%76%77%78%79%7a%41%42%43%44%45%46%47%48%49%4a%4b%4c%4d%4e%4f%50%51%52%53%54%55%56%57%58%59%5a%30%31%32%33%34%35%36%37%38%39}
    } -cleanup {} -result {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789}

   test url_decode-1.2 {url_decode utf-8 some unsafe characters} -body {
        url_decode {!\"£$%^&*():? #'@[]{},/|+á
} 
    } -cleanup {} -result {!\"£$%^&*():? #'@[]{},/| á
}

    test url_decode-1.3 {url_decode utf-8 some encoded unsafe characters} -body {
        url_decode {%21%5c%22%c2%a3%24%25%5e%26%2a%28%29%3a%3f+%20%23%27%40%5b%5d%7b%7d%2c%2f%7c%2b%c3%a1%0a}
    } -cleanup {} -result {!\"£$%^&*():?  #'@[]{},/|+á
}

    test url_decode-1.4 {url_decode iso8859-1 safe characters} -body {
        url_decode {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789} iso8859-1
    } -cleanup {} -result {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789}

    test url_decode-1.5 {url_decode iso8859-1 encoded safe characters} -body {
        url_decode {%2e%2d%5f%7e%61%62%63%64%65%66%67%68%69%6a%6b%6c%6d%6e%6f%70%71%72%73%74%75%76%77%78%79%7a%41%42%43%44%45%46%47%48%49%4a%4b%4c%4d%4e%4f%50%51%52%53%54%55%56%57%58%59%5a%30%31%32%33%34%35%36%37%38%39} iso8859-1
    } -cleanup {} -result {.-_~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789}

    test url_decode-1.6 {url_decode iso8859-1 some unsafe characters} -body {
        url_decode {!\"£$%^&*():? #'@[]{},/|+á
} iso8859-1
    } -cleanup {} -result {!\"£$%^&*():? #'@[]{},/| á
}

    test url_decode-1.7 {url_decode iso8859-1 some encoded unsafe characters} -body {
        url_decode {%21%5c%22%a3%24%25%5e%26%2a%28%29%3a%3f+%20%23%27%40%5b%5d%7b%7d%2c%2f%7c%2b%e1%0a} iso8859-1
    } -cleanup {} -result {!\"£$%^&*():?  #'@[]{},/|+á
}   

    # url 
    test url-1.0 {url some safe characters} -body {
        url someplace.html session_id 23.121 title Mr first_name Test last_name Test age ~25 dob 1988-03-13
    } -cleanup {} -result {someplace.html?last_name=Test&first_name=Test&session_id=23.121&dob=1988-03-13&age=~25&title=Mr}
    
    test url-1.1 {url some unsafe characters} -body {
        url someplace.html next_url someplace_else.html?name=Mr+Test+Test&email=test@test.com
    } -cleanup {} -result {someplace.html?next_url=someplace_else.html%3fname%3dMr%2bTest%2bTest%26email%3dtest%40test.com}

    test url-1.2 {url some safe characters} -body {
        url someplace.html#someanchor session_id 23.121 title Mr first_name Test last_name Test age ~25 dob 1988-03-13
    } -cleanup {} -result {someplace.html?last_name=Test&first_name=Test&session_id=23.121&dob=1988-03-13&age=~25&title=Mr#someanchor}
    
    test url-1.3 {url some safe characters} -body {
        url someplace.html?a=1#someanchor session_id 23.121 title Mr first_name Test last_name Test age ~25 dob 1988-03-13
    } -cleanup {} -result {someplace.html?last_name=Test&first_name=Test&session_id=23.121&dob=1988-03-13&age=~25&a=1&title=Mr#someanchor}
    
    test url-1.4 {url some unsafe characters} -body {
        url someplace.html#someanchor next_url someplace_else.html?name=Mr+Test+Test&email=test@test.com
    } -cleanup {} -result {someplace.html?next_url=someplace_else.html%3fname%3dMr%2bTest%2bTest%26email%3dtest%40test.com#someanchor}
    
    # url_match
    test url_match-1.0 {url_match identical urls} -body {
        url_match /foo /foo
    } -result true

    test url_match-1.1 {url_match completely different urls} -body {
        url_match /foo /bar
    } -result false

    test url_match-1.2 {url_match urls with params} -body {
        url_match /shape?width=12&height=14 /shape?width=12&height=14
    } -result true

    test url_match-1.3 {url_match re-ordered params} -body {
        url_match /shape?width=12&height=14 /shape?height=14&width=12
    } -result true

    test url_match-1.4 {url_match urls with different params} -body {
        url_match /shape?width=12&height=14 /shape?center=2&radius=3
    } -result false

    test url_match-1.5 {url_match urls with redundant params} -body {
        url_match /shape?width=12&height=14 /shape?width=12&height=14&depth=3
    } -result true

    test url_match-1.6 {url_match urls with insufficient params} -body {
        url_match /shape?width=12&height=14&depth=3 /shape?width=12&height=14
    } -result false

    test url_match-1.7 {url_match urls list params} -body {
        url_match /shape?colors=red&colors=green&height=12 /shape?height=12&colors=green&colors=red
    } -result true

    test url_match-1.8 {url_match urls unmatched list params} -body {
        url_match /shape?colors=red&colors=green&height=12 /shape?height=12&colors=red&colors=blue
    } -result false

    test url_match-1.9 {url_match urls repeated params} -body {
        url_match /matches?score=1&score=1&score=5&sides=2 /matches?sides=2&score=5&score=1&score=1&score=1
    } -result true

    test url_match-1.10 {url_match urls unmatched repeated params} -body {
        url_match /matches?score=1&score=1&score=5&sides=2 /matches?sides=2&&score=5score=1
    } -result false

    test url_match-1.11 {url_match fragment} -body {
        url_match /home#test /home?foo=bar#test
    } -result true

    test url_match-1.12 {url_match missing fragment} -body {
        url_match /home#test /home?foo=bar
    } -result false

    test url_match-1.13 {url_match redundant fragment} -body {
        url_match /home /home?foo=bar#test
    } -result true

    test url_match-1.14 {url_match differing fragments} -body {
        url_match /home#comments /home#article
    } -result false

    test url_match-1.15 {url_match with no path} -body {
        url_match https://www.qcode.test.co.uk:80 https://www.qcode.test.co.uk:80
    } -result true

    test url_match-1.16 {url_match with no path, different urls} -body {
        url_match https://www.qcode.test.co.uk:80 https://coolwebsite.com:80
    } -result false

    # url_parts
    test url_parts-1.0 {url parts with everything} -body {
        url_parts "https://www.qcode.test.co.uk:80/homepage?width=12&age=2#flowers"
    } -result {base https://www.qcode.test.co.uk:80/homepage params {width 12 age 2} hash flowers protocol https domain www.qcode.test.co.uk port 80 path /homepage}

    test url_parts-1.1 {url parts with no port} -body {
        url_parts "https://www.qcode.test.co.uk/homepage?width=12&age=2#flowers"
    } -result {base https://www.qcode.test.co.uk/homepage params {width 12 age 2} hash flowers protocol https domain www.qcode.test.co.uk port {} path /homepage}

    test url_parts-1.3 {url parts with no domain} -body {
        url_parts "/homepage?width=12&age=2#flowers"
    } -result {base /homepage params {width 12 age 2} hash flowers protocol {} domain {} port {} path /homepage}

    test url_parts-1.4 {url parts with no params} -body {
        url_parts "https://www.qcode.test.co.uk:80/homepage#flowers"
    } -result {base https://www.qcode.test.co.uk:80/homepage params {} hash flowers protocol https domain www.qcode.test.co.uk port 80 path /homepage}

    test url_parts-1.5 {url parts with no hash} -body {
        url_parts "https://www.qcode.test.co.uk:80/homepage?width=12&age=2"
    } -result {base https://www.qcode.test.co.uk:80/homepage params {width 12 age 2} hash {} protocol https domain www.qcode.test.co.uk port 80 path /homepage}

    test url_parts-1.6 {url parts with path only} -body {
        url_parts "homepage"
    } -result {base homepage params {} hash {} protocol {} domain {} port {} path homepage}

    test url_parts-1.7 {url parts with no path} -body {
        url_parts "https://www.qcode.test.co.uk:80"
    } -result {base https://www.qcode.test.co.uk:80 params {} hash {} protocol https domain www.qcode.test.co.uk port 80 path {}}

    test url_parts-1.8 {url parts with all safe chars } -body {
        url_parts {https://www.qcode.test.com/test/this,(123)+is-strange!@for%2F$url*'x'.html}
    } -result {base {https://www.qcode.test.com/test/this,(123)+is-strange!@for%2F$url*'x'.html} params {} hash {} protocol https domain www.qcode.test.com port {} path {/test/this,(123)+is-strange!@for%2F$url*'x'.html}}

    test url_parts-1.9 {url parts with all safe chars no domain } -body {
        url_parts {/test/this,(123)+is-strange!@for%2F$url*'x'.html}
    } -result {base {/test/this,(123)+is-strange!@for%2F$url*'x'.html} params {} hash {} protocol {} domain {} port {} path {/test/this,(123)+is-strange!@for%2F$url*'x'.html}}
    
    test url_parts-1.10 {url parts with all safe chars no domain and query} -body {
        url_parts {/test/this,(123)+is-strange!for%2F$url*'x'.html?width(a)=123&width(b)=321}
    } -result {base {/test/this,(123)+is-strange!for%2F$url*'x'.html} params {width(a) 123 width(b) 321} hash {} protocol {} domain {} port {} path {/test/this,(123)+is-strange!for%2F$url*'x'.html}}

    test url_parts-1.11 {url parts with all safe chars no domain and hash} -body {
        url_parts {/test/this,(123)+is-strange!for%2F$url*'x'.html#placeholder(a)}
    } -result {base {/test/this,(123)+is-strange!for%2F$url*'x'.html} params {} hash placeholder(a) protocol {} domain {} port {} path {/test/this,(123)+is-strange!for%2F$url*'x'.html}}

    # url_request_path
    test url_request_path-1.0 {url_request_path basic usage} -body {
        url_request_path "GET /homepage?foo=bar HTTP/1.1"
    } -result {/homepage}

    test url_request_path-1.1 {url_request_path encoded} -body {
        url_request_path "GET /home%20page?foo=bar HTTP/1.1"
    } -result {/home%20page}

    # url_unset
    test url_unset-1.0 {url_unset} -body {
        url_unset somewhere.html a
    } -result {somewhere.html}

    test url_unset-1.1 {url_unset} -body {
        url_unset somewhere.html?a=1&b=2 a
    } -result {somewhere.html?b=2}
    
    test url_unset-1.2 {url_unset} -body {
        url_unset http://somedomain.com/somewhere.html?a=1&b=2 a
    } -result {http://somedomain.com/somewhere.html?b=2}

    test url_unset-1.3 {url_unset} -body {
        url_unset somewhere.html#somefragment a
    } -result {somewhere.html#somefragment}

    test url_unset-1.4 {url_unset} -body {
        url_unset somewhere.html?a=1&b=2#somefragment a
    } -result {somewhere.html?b=2#somefragment}
    
    test url_unset-1.5 {url_unset} -body {
        url_unset http://somedomain.com/somewhere.html?a=1&b=2#somefragment a
    } -result {http://somedomain.com/somewhere.html?b=2#somefragment}
    
    # url_to_html_hidden
    test url_to_html_hidden-1.0 {url_to_html_hidden} -body {
        url_to_html_hidden http://somedomain.com/somewhere.html
    } -result ""

    test url_to_html_hidden-1.1 {url_to_html_hidden} -body {
        url_to_html_hidden http://somedomain.com/somewhere.html?a=1&b=2
    } -result "<input type=\"hidden\" name=\"a\" value=\"1\" id=\"a\">\n<input type=\"hidden\" name=\"b\" value=\"2\" id=\"b\">\n"

    test url_to_html_hidden-1.2 {url_to_html_hidden} -body {
        url_to_html_hidden http://somedomain.com/somewhere.html?a=1&b=2#somefragment
    } -result "<input type=\"hidden\" name=\"a\" value=\"1\" id=\"a\">\n<input type=\"hidden\" name=\"b\" value=\"2\" id=\"b\">\n"
    

    cleanupTests
}
namespace delete ::qcode::test
