package require tcltest
eval ::tcltest::configure $argv
# Ensure package is loaded from ./qcode rather than /usr/lib/tcltk
set auto_path [linsert $auto_path 0 ./qcode]
package require qcode
package require Pgtcl
namespace import qc::*

namespace eval ::qcode::test {
    namespace import ::tcltest::*
    testConstraint requires_database true

    # The test user configuration.
    set test_conf {
        host localhost
        port 5432
        dbname test_database
        user test_user
        password test_password
    }

    # Request a username/password in order to set up test environment
    # User must have sufficient privileges (create user, create db)
    puts "Enter username for database:"
    set user [gets stdin]
    puts "Enter password for database:"
    exec stty -echo
    set password [gets stdin]
    exec stty echo

    # Attempt to setup a database and user for testing
    set conn [pg_connect -connlist "
        host localhost
        port 5432
        dbname template1
        user $user
        password $password
    "]
    set pgcrypto_path [exec pg_config --sharedir]/contrib/pgcrypto.sql
    set failed [catch {
        pg_execute $conn {CREATE DATABASE test_database}
        pg_execute $conn {
            CREATE USER test_user WITH PASSWORD 'test_password';
            GRANT ALL PRIVILEGES ON DATABASE test_database TO test_user;
        }
        pg_execute $conn "\\i $pgcrypto_path"
    } results options]
    pg_disconnect $conn
    if { $failed } {
        return -options $options $results
    }

    # Create setup and cleanup scripts for tests
    set setup {
        # Establish a connection the qc::db way
        db_connect {*}$test_conf

        # Encryption key for testing
        set key secretkey
    }
    set cleanup {
        # Cleanup the qc::db connection
        pg_disconnect $_db
        unset _db

        # Cleanup vars
        unset key
    }

    # Catch errors in testing so that the database can always be cleaned up after
    set testing_failed [catch {
        # ========================================
        # Begin the actual testing
        # ========================================
        # pkcs_padding_append

        # pkcs_padding_strip            


        # encrypt_bf_db
        test encrypt_bf_db-1.0 {encrypt_bf_db - encrypt empty string} -setup $setup -cleanup $cleanup -constraints {requires_database} -body {
            encrypt_bf_db $key ""
        } -result {}

        test encrypt_bf_db-1.1 {encrypt_bf_db - plaintext -> ciphertext -> plaintext} -setup $setup -cleanup $cleanup -constraints {requires_database} -body {
            set i 0
            set string ""
            while { $i <= 500 } {
                append string [format %c $i]   
                set r1 [encrypt_bf_db $key $string]
                set r2 [decrypt_bf_db $key $r1]
                if { $r2 ne $string } {
                    # Return after first error
                    return "Unable to successfully encrypt and decrypt \"$string\""
                }                
                incr i
            }
            return ""
        } -result {}
        

        # encrypt_bf_tcl
        test encrypt_bf_tcl-1.0 {encrypt_bf_tcl - encrypt empty string} -setup $setup -cleanup $cleanup -constraints {requires_database} -body {
            encrypt_bf_tcl $key ""
        } -result {}

        test encrypt_bf_tcl-1.1 {encrypt_bf_tcl - plaintext -> ciphertext -> plaintext} -setup $setup -cleanup $cleanup -constraints {requires_database} -body {
            set i 0
            set string ""
            while { $i <= 500 } {
                append string [format %c $i]   
                set r1 [encrypt_bf_tcl $key $string]
                set r2 [decrypt_bf_tcl $key $r1]
                if { $r2 ne $string } {
                    # Return after first error
                    return "Unable to successfully encrypt and decrypt \"$string\""
                }                
                incr i
            }
            return ""
        } -result {}

        test encrypt_bf_tcl-1.2 {encrypt_bf-tcl - check compatibility with encrypt_bf_db} -setup $setup -cleanup $cleanup -constraints {requires_database} -body {
            set i 0
            set string ""
            while { $i <= 500 } {
                append string [format %c $i]   
                set r1 [encrypt_bf_tcl $key $string]
                set r2 [encrypt_bf_db $key $string]
                if { [trim $r1] ne [trim $r2] } {
                    # Return after first error
                    return "Unable to successfully encrypt and decrypt \"$string\""
                }                
                incr i
            }
            return ""
        } -result {}

        # ========================================
        # End of testing - now do cleanup
        # ========================================
    } testing_fail_results testing_fail_options]

    # Attempt to drop the database and user that were created for testing
    set conn [pg_connect -connlist "
        host localhost
        port 5432
        dbname template1
        user $user
        password $password
    "]
    set database_cleanup_failed [catch {
        pg_execute $conn {DROP DATABASE IF EXISTS test_database}
        pg_execute $conn {
            DROP ROLE IF EXISTS test_user;
        }
    } database_cleanup_results database_cleanup_options]
    pg_disconnect $conn

    if { $testing_failed } {
        return -options $testing_fail_options $testing_fail_results
    }

    if { $database_cleanup_failed } {
        return -options $database_cleanup_options $database_cleanup_results
    }

    cleanupTests
}
namespace delete ::qcode::test
